<?php

$NAMESPACE$

use $APPNAME$Http\Requests;
use SOSTheBlack\Repository\Contracts\ValidatorInterface;
use SOSTheBlack\Repository\Exceptions\ValidatorException;
use $APPNAME$Http\Requests\$CLASS$CreateRequest;
use $APPNAME$Http\Requests\$CLASS$UpdateRequest;
use Illuminate\Http\Response;
use Illuminate\Http\Request;
use Illuminate\Contracts\View\View;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\JsonResponse
$REPOSITORY$
$VALIDATOR$

final class $CONTROLLER$Controller extends Controller
{
    public function __construct(protected $CLASS$Repository $repository, protected $CLASS$Validator $validator)
    {

    }

    /**
     * Display a listing of the resource.
     *
     * @return View
     */
    public function index(): View
    {
        $this->repository->pushCriteria(app(\SOSTheBlack\Repository\Criteria\RequestCriteria::class));
        $$PLURAL$ = $this->repository->all();

        if (request()->wantsJson()) {

            return response()->json([
                'data' => $$PLURAL$,
            ]);
        }

        return view('$PLURAL$.index', compact('$PLURAL$'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  $CLASS$CreateRequest $request
     *
     * @return RedirectResponse|JsonResponse;
     *
     * @throws ValidatorException
     */
    public function store($CLASS$CreateRequest $request): RedirectResponse|JsonResponse
    {
        try {

            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_CREATE);

            $$SINGULAR$ = $this->repository->create($request->all());

            $response = [
                'message' => '$CLASS$ created.',
                'data'    => $$SINGULAR$->toArray(),
            ];

            if ($request->wantsJson()) {

                return response()->json($response);
            }

            return redirect()->back()->with('message', $response['message']);
        } catch (ValidatorException $e) {
            if ($request->wantsJson()) {
                return response()->json([
                    'error'   => true,
                    'message' => $e->getMessageBag()
                ]);
            }

            return redirect()->back()->withErrors($e->getMessageBag())->withInput();
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id): JsonResponse|View
    {
        $$SINGULAR$ = $this->repository->find($id);

        if (request()->wantsJson()) {

            return response()->json([
                'data' => $$SINGULAR$,
            ]);
        }

        return view('$PLURAL$.show', compact('$SINGULAR$'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     *
     * @return View
     */
    public function edit($id): View
    {
        $$SINGULAR$ = $this->repository->find($id);

        return view('$PLURAL$.edit', compact('$SINGULAR$'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  $CLASS$UpdateRequest $request
     * @param  string            $id
     *
     * @return RedirectResponse|JsonResponse
     *
     * @throws \SOSTheBlack\Repository\Exceptions\ValidatorException
     */
    public function update($CLASS$UpdateRequest $request, $id): RedirectResponse|JsonResponse
    {
        try {

            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_UPDATE);

            $$SINGULAR$ = $this->repository->update($request->all(), $id);

            $response = [
                'message' => '$CLASS$ updated.',
                'data'    => $$SINGULAR$->toArray(),
            ];

            if ($request->wantsJson()) {

                return response()->json($response);
            }

            return redirect()->back()->with('message', $response['message']);
        } catch (ValidatorException $e) {

            if ($request->wantsJson()) {

                return response()->json([
                    'error'   => true,
                    'message' => $e->getMessageBag()
                ]);
            }

            return redirect()->back()->withErrors($e->getMessageBag())->withInput();
        }
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     *
     * @return RedirectResponse|JsonResponse
     */
    public function destroy($id): RedirectResponse|JsonResponse
    {
        $deleted = $this->repository->delete($id);

        if (request()->wantsJson()) {

            return response()->json([
                'message' => '$CLASS$ deleted.',
                'deleted' => $deleted,
            ]);
        }

        return redirect()->back()->with('message', '$CLASS$ deleted.');
    }
}
